{"version":3,"sources":["components/BucketForm.js","components/Bucket.js","components/BucketList.js","App.js","index.js"],"names":["BucketForm","props","_useState","useState","_useState2","_slicedToArray","input","setInput","_useState3","_useState4","eagerness","setEagerness","eagernessLevel","handleSubmit","e","preventDefault","onSubmit","id","Math","random","floor","text","handleChange","target","value","edit","_jsxs","children","className","_jsx","type","placeholder","name","onChange","concat","onClick","Bucket","setEdit","console","log","bucket","map","item","index","complete","completeBucketItem","BucketList","setBucket","_toConsumableArray","updatedBucket","removeBucketItem","filter","editBucketItem","itemId","newValue","prev","App","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.afc4ca3d.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nfunction BucketForm(props) {\n  const [input, setInput] = useState('');\n  let [eagerness, setEagerness] = useState('');\n\n  // TODO: Use this array in the return statement below\n  const eagernessLevel = ['high', 'medium', 'low']\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (!eagerness) {\n      eagerness = 'low';\n    }\n\n    props.onSubmit({\n      id: Math.random(Math.floor() * 1000),\n      text: input,\n      eagerness: eagerness,\n    });\n\n    setInput('');\n    setEagerness('');\n  };\n\n  const handleChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  // First we check to see if \"edit\" prop exists. If not, we render the normal form\n  // If the prop \"edit\" exists, we know to render the update form instead\n  return !props.edit ? (\n    <div>\n      <form className=\"bucket-form\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Add to your bucket list\"\n          value={input}\n          name=\"text\"\n          className=\"bucket-input\"\n          onChange={handleChange}\n        ></input>\n        <div className=\"dropdown\">\n          <button className={`dropbtn ${eagerness}`}>\n            {eagerness || 'Priority'}\n          </button>\n          <div className=\"dropdown-content\">\n            {/* TODO: Add an onClick event that will set the corresponding eagerness level from the `eagernessLevel` array */}\n            <p onClick={()=>setEagerness([eagernessLevel[0]])}>Must do</p>\n            <p onClick={()=>setEagerness([eagernessLevel[1]])}>Want to do</p>\n            <p onClick={()=>setEagerness([eagernessLevel[2]])}>Take it or leave it</p>\n          </div>\n        </div>\n        <button className=\"bucket-button\">Add bucket list item</button>\n      </form>\n    </div>\n  ) : (\n    <div>\n      <h3>Update entry: {props.edit.value}</h3>\n      <form className=\"bucket-form\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder={props.edit.value}\n          value={input}\n          name=\"text\"\n          className=\"bucket-input\"\n          onChange={handleChange}\n        ></input>\n        <div className=\"dropdown\">\n          <button className={`dropbtn ${eagerness}`}>\n            {eagerness || 'Priority'}\n          </button>\n          <div className=\"dropdown-content\">\n            {/* TODO: Add an onClick event that will set the corresponding eagerness level from the `eagernessLevel` array */}\n            <p onClick={()=>setEagerness([eagernessLevel[0]])}>Must do</p>\n            <p onClick={()=>setEagerness([eagernessLevel[1]])}>Want to do</p>\n            <p onClick={()=>setEagerness([eagernessLevel[2]])}>Take it or leave it</p>\n          </div>\n        </div>\n        <button className=\"bucket-button\">Update</button>\n      </form>\n    </div>\n  );\n}\n\nexport default BucketForm;\n","import React, { useState } from 'react';\nimport BucketForm from './BucketForm';\n\nfunction Bucket(props) {\n  const [edit, setEdit] = useState({\n    id: null,\n    value: '',\n    eagerness: '',\n  });\n\n  console.log(props.bucket);\n\n  const submitUpdate = (value) => {\n\n    // TODO: Write logic to update the `edit` value in state after a user updates an entry in the list\n\n    // setEdit({id: props.bucket.id})\n    // TODO: Set the key:value pairs in the `edit` object back to empty strings\n\n  };\n\n  // If the user is attempting to edit an item, render the bucket form with the edit variable passed as a prop\n  if (edit.id) {\n    return <BucketForm edit={edit} onSubmit={submitUpdate} />;\n  }\n\n  return props.bucket.map((item, index) => (\n    // TODO: Add a className of `bucket-row complete ${item.eagerness}` for completed items, and `bucket-row ${item.eagerness}` for non-completed items\n    // TODO: Add a key attribute set to the value of the index position\n    // Hint: use a ternary operator\n    <div className={item.complete ? `bucket-row complete ${item.eagerness}` :  `bucket-row ${item.eagerness}`} key={index}>\n\n      {/* TODO: Add an onClick event that invokes the `completeBucketItem` method passing the item id as a argument */}\n      <div key={item.id} onClick={() => props.completeBucketItem(item.id)}>\n        \n          {item.text}\n      </div>\n      <div className=\"icons\">\n        {/* TODO: Add an onClick event update the `edit` object with the `id`, `value`, and `eagerness` properties */}\n        <p onClick={() => setEdit({id: item.id, value: item.value, eagerness: item.eagerness})}> ‚úèÔ∏è</p>\n        {/* TODO: Add an onClick event that will invoke the removeBucketItem method passing in the `item.id` */}\n        <p onClick={() => setEdit({id: null, value: \"\", eagerness: \"\"})}> üóëÔ∏è</p>\n      </div>\n    </div>\n  ));\n}\n\nexport default Bucket;\n","import React, { useState } from 'react';\nimport BucketForm from './BucketForm';\nimport Bucket from './Bucket';\n\nfunction BucketList() {\n  const [bucket, setBucket] = useState([]);\n\n  // Function to add a bucket list item\n  const addBucketItem = (item) => {\n\n    // TODO: Write logic to add the new bucket item to the bucket state variable\n    setBucket([...bucket, item]);\n  };\n\n  // Function to mark bucket list item as complete\n  const completeBucketItem = (id) => {\n    // If the ID passed to this function matches the ID of the item that was clicked, mark it as complete\n    let updatedBucket = bucket.map((item) => {\n      \n      // TODO: Write logic that marks an item as complete or incomplete when invoked\n      if (id === item.id) {\n        // item.classList.add(\"complete\");\n        item.complete = true;\n      } \n    });\n\n    setBucket(updatedBucket);\n  };\n\n  // Function to remove bucket list item and update state\n  const removeBucketItem = (id) => {\n    // TODO: Write logic that will return an array of items that don't contain the ID passed to this function\n    setBucket(bucket.filter((item) => item.id !== id));\n\n    // TODO: Update the bucket state variable\n  };\n\n  // Function to edit the bucket list item\n  const editBucketItem = (itemId, newValue) => {\n    // Make sure that the value isn't empty\n    if (!newValue.text) {\n      return;\n    }\n\n    // We use the \"prev\" argument provided with the useState hook to map through our list of items\n    // We then check to see if the item ID matches the id of the item that was clicked and if so, we set it to a new value\n    setBucket((prev) =>\n      prev.map((item) => (item.id === itemId ? newValue : item))\n    );\n  };\n\n  return (\n    <div>\n      <h1>What is on your bucket list?</h1>\n      <BucketForm onSubmit={addBucketItem} />\n      <Bucket\n        bucket={bucket}\n        completeBucketItem={completeBucketItem}\n        removeBucketItem={removeBucketItem}\n        editBucketItem={editBucketItem}\n      ></Bucket>\n    </div>\n  );\n}\n\nexport default BucketList;\n","import './App.css';\nimport BucketList from './components/BucketList';\n\nfunction App() {\n  return (\n    <div className=\"bucket-app\">\n      <BucketList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}